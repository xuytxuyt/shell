
using Tensors, BenchmarkExample
import Gmsh: gmsh

function import_roof_gauss(filename::String)
    gmsh.initialize()
    gmsh.open(filename)

    type = ReproducingKernel{:Quadratic2D,:□,:QuinticSpline}
    integrationOrder = 8
    entities = getPhysicalGroups()
    nodes = get𝑿ᵢ()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    sp = RegularGrid(x,y,z,n = 1,γ = 5)
    # cs = BenchmarkExample.cylindricalCoordinate(BenchmarkExample.ScordelisLoRoof.𝑅)
    cs = BenchmarkExample.cartesianCoordinate()
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()
    elements["Ω"] = getCurvedElements(nodes, entities["Ω"], type, cs, integrationOrder, sp)
    elements["Γ¹"] = getCurvedElements(nodes, entities["Γ¹"], type, cs, integrationScheme, sp)
    elements["Γ²"] = getCurvedElements(nodes, entities["Γ²"], type, cs, integrationScheme, sp)
    elements["Γ³"] = getCurvedElements(nodes, entities["Γ³"], type, cs, integrationScheme, sp)
    elements["Γ⁴"] = getCurvedElements(nodes, entities["Γ⁴"], type, cs, integrationScheme, sp)

    gmsh.finalize()
    return elements, nodes
end

function import_roof_mix(filename::String)
    gmsh.initialize()
    gmsh.open(filename)
    type = ReproducingKernel{:Quadratic2D,:□,:QuinticSpline}
    # type = ReproducingKernel{:Cubic2D,:□,:CubicSpline}
    # nₘ = 55
    entities = getPhysicalGroups()
    nodes = get𝑿ᵢ()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    sp = RegularGrid(x,y,z,n = 1,γ = 5)
    # cs = BenchmarkExample.cylindricalCoordinate(BenchmarkExample.PatchTestThinShell.𝑅)
    cs = BenchmarkExample.cartesianCoordinate()
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()

    integrationOrder= 2
    elements["Ω"] = getCurvedPiecewiseElements(entities["Ω"], PiecewisePolynomial{:Linear2D}, cs, integrationOrder)

    integrationScheme = trilobatto6
    elements["Ωₚ"] = getCurvedPiecewiseElements(entities["Ω"], PiecewisePolynomial{:Linear2D}, cs, integrationScheme)
    elements["Ωₘ"] = getCurvedElements(nodes, entities["Ω"], type, cs, integrationScheme, sp)

    integrationScheme = lobatto3
    elements["Γₚ"] = getCurvedPiecewiseElements(entities["Γ"],PiecewisePolynomial{:Linear2D}, cs, integrationScheme,3)
    elements["Γₘ"] = getCurvedElements(nodes, entities["Γ"], type, cs, integrationScheme, sp)
    elements["Γ¹"] = getCurvedElements(nodes, entities["Γ¹"], type, cs, integrationScheme, sp)
    elements["Γ²"] = getCurvedElements(nodes, entities["Γ²"], type, cs, integrationScheme, sp)
    elements["Γ³"] = getCurvedElements(nodes, entities["Γ³"], type, cs, integrationScheme, sp)
    elements["Γ⁴"] = getCurvedElements(nodes, entities["Γ⁴"], type, cs, integrationScheme, sp)
    elements["Γ¹ₚ"] = getElements(entities["Γ¹"], entities["Γ"], elements["Γₚ"])
    elements["Γ²ₚ"] = getElements(entities["Γ²"], entities["Γ"], elements["Γₚ"])
    elements["Γ³ₚ"] = getElements(entities["Γ³"], entities["Γ"], elements["Γₚ"])
    elements["Γ⁴ₚ"] = getElements(entities["Γ⁴"], entities["Γ"], elements["Γₚ"])

    integrationOrder= 8
    elements["Ωᵍ"] = getCurvedElements(nodes, entities["Ω"], type, cs, integrationOrder, sp)

    gmsh.finalize()
    return elements, nodes
end

function import_roof_mix_nitsche(filename::String)
    gmsh.initialize()
    gmsh.open(filename)
    type = ReproducingKernel{:Quadratic2D,:□,:QuinticSpline}
    # type = ReproducingKernel{:Cubic2D,:□,:CubicSpline}
    # nₘ = 55
    entities = getPhysicalGroups()
    nodes = get𝑿ᵢ()
    x = nodes.x
    y = nodes.y
    z = nodes.z
    sp = RegularGrid(x,y,z,n = 1,γ = 5)
    # cs = BenchmarkExample.cylindricalCoordinate(BenchmarkExample.PatchTestThinShell.𝑅)
    cs = BenchmarkExample.cartesianCoordinate()
    elements = Dict{String,Vector{ApproxOperator.AbstractElement}}()

    integrationOrder= 2
    elements["Ω"] = getCurvedPiecewiseElements(entities["Ω"], PiecewisePolynomial{:Linear2D}, cs, integrationOrder)

    integrationScheme = trilobatto6
    elements["Ωₚ"] = getCurvedPiecewiseElements(entities["Ω"], PiecewisePolynomial{:Linear2D}, cs, integrationScheme)
    elements["Ωₘ"] = getCurvedElements(nodes, entities["Ω"], type, cs, integrationScheme, sp)

    integrationScheme = lobatto3
    elements["Γₚ"] = getCurvedPiecewiseElements(entities["Γ"],PiecewisePolynomial{:Linear2D}, cs, integrationScheme,3)
    elements["Γₘ"] = getCurvedElements(nodes, entities["Γ"], type, cs, integrationScheme, sp)
    elements["Γ¹"] = getCurvedElements(nodes, entities["Γ¹"], type, cs, integrationScheme, sp)
    elements["Γ²"] = getCurvedElements(nodes, entities["Γ²"], type, cs, integrationScheme, sp)
    elements["Γ³"] = getCurvedElements(nodes, entities["Γ³"], type, cs, integrationScheme, sp)
    elements["Γ⁴"] = getCurvedElements(nodes, entities["Γ⁴"], type, cs, integrationScheme, sp)
    elements["Γ¹ₚ"] = getElements(entities["Γ¹"], entities["Γ"], elements["Γₚ"])
    elements["Γ²ₚ"] = getElements(entities["Γ²"], entities["Γ"], elements["Γₚ"])
    elements["Γ³ₚ"] = getElements(entities["Γ³"], entities["Γ"], elements["Γₚ"])
    elements["Γ⁴ₚ"] = getElements(entities["Γ⁴"], entities["Γ"], elements["Γₚ"])

    integrationOrder= 8
    elements["Ωᵍ"] = getCurvedElements(nodes, entities["Ω"], type, cs, integrationOrder, sp)


    gmsh.finalize()
    return elements, nodes
end
prescribeForGauss = quote
    𝗠 = (0,zeros(nₘ))
    ∂𝗠∂x = (0,zeros(nₘ))
    ∂𝗠∂y = (0,zeros(nₘ))
    ∂²𝗠∂x² = (0,zeros(nₘ))
    ∂²𝗠∂x∂y = (0,zeros(nₘ))
    ∂²𝗠∂y² = (0,zeros(nₘ))
    prescribe!(elements["Ω"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ω"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ω"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ω"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:b₁=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[1])
    prescribe!(elements["Ω"],:b₂=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[2])
    prescribe!(elements["Ω"],:b₃=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[3])
end
prescribeForMix = quote
    𝗠 = (0,zeros(nₘ))
    ∂𝗠∂x = (0,zeros(nₘ))
    ∂𝗠∂y = (0,zeros(nₘ))
    prescribe!(elements["Ω"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ω"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ω"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ω"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ω"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ω"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    
    prescribe!(elements["Ωₘ"],:b₁=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[1])
    prescribe!(elements["Ωₘ"],:b₂=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[2])
    prescribe!(elements["Ωₘ"],:b₃=>(ξ¹,ξ²,ξ³)->vs.𝒃(Vec{2}((ξ¹,ξ²)))[3])

    prescribe!(elements["Ωₚ"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ¹₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωₚ"],:Γ²₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    prescribe!(elements["Γₚ"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γₚ"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γₚ"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γₚ"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γₚ"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γₚ"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γₚ"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γₚ"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γₚ"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    push!(elements["Ωₘ"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Ωₘ"], :𝗠=>𝗠, :∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γₘ"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γₘ"], :𝗠=>𝗠, :∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)

    push!(elements["Ω"], :𝝭=>:𝑠)
    push!(elements["Ωₚ"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠)
    push!(elements["Γₚ"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)

    push!(elements["Γ¹"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ²"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ³"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ⁴"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ¹"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ²"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ³"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ⁴"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
end

prescribeForPenalty = quote
    prescribe!(elements["Γ¹"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ¹"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ¹"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ¹"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ¹"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ¹"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)
    
    prescribe!(elements["Γ²"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ²"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ²"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ²"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ²"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ²"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    prescribe!(elements["Γ³"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ³"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ³"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ³"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ³"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ³"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    prescribe!(elements["Γ⁴"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ⁴"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ⁴"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ⁴"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ⁴"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ⁴"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    push!(elements["Γ¹"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ²"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ³"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ⁴"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠)
    push!(elements["Γ¹"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ²"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ³"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
    push!(elements["Γ⁴"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y)
end
prescribeForNitsche = quote
    ∂³𝗠∂x³ = (0,zeros(nₘ))
    ∂³𝗠∂x²∂y = (0,zeros(nₘ))
    ∂³𝗠∂x∂y² = (0,zeros(nₘ))
    ∂³𝗠∂y³ = (0,zeros(nₘ))
    prescribe!(elements["Γ¹"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:b₁₁=>(ξ¹,ξ²,ξ³)->cs.b₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:b₂₂=>(ξ¹,ξ²,ξ³)->cs.b₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:b₁₂=>(ξ¹,ξ²,ξ³)->cs.b₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:𝒂¹₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂¹₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂¹₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:𝒂²₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂²₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂²₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:𝒂³₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ¹"],:𝒂³₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ¹"],:𝒂³₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ¹"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ¹₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ¹"],:Γ²₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    prescribe!(elements["Γ²"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:b₁₁=>(ξ¹,ξ²,ξ³)->cs.b₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:b₂₂=>(ξ¹,ξ²,ξ³)->cs.b₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:b₁₂=>(ξ¹,ξ²,ξ³)->cs.b₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:𝒂¹₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂¹₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂¹₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:𝒂²₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂²₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂²₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:𝒂³₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ²"],:𝒂³₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ²"],:𝒂³₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ²"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ¹₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ²"],:Γ²₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    prescribe!(elements["Γ³"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:b₁₁=>(ξ¹,ξ²,ξ³)->cs.b₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:b₂₂=>(ξ¹,ξ²,ξ³)->cs.b₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:b₁₂=>(ξ¹,ξ²,ξ³)->cs.b₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:𝒂¹₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂¹₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂¹₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:𝒂²₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂²₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂²₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:𝒂³₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ³"],:𝒂³₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ³"],:𝒂³₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ³"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ¹₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ³"],:Γ²₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    prescribe!(elements["Γ⁴"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:b₁₁=>(ξ¹,ξ²,ξ³)->cs.b₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:b₂₂=>(ξ¹,ξ²,ξ³)->cs.b₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:b₁₂=>(ξ¹,ξ²,ξ³)->cs.b₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:𝒂¹₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂¹₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂¹₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂¹(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:𝒂²₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂²₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂²₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂²(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:𝒂³₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Γ⁴"],:𝒂³₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Γ⁴"],:𝒂³₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂³(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Γ⁴"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ¹₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₁₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₁₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₁₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₂₂₁=>(ξ¹,ξ²,ξ³)->cs.∂₁Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Γ⁴"],:Γ²₂₂₂=>(ξ¹,ξ²,ξ³)->cs.∂₂Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    push!(elements["Γ¹"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠, :∂³𝝭∂x³=>:𝑠, :∂³𝝭∂x²∂y=>:𝑠, :∂³𝝭∂x∂y²=>:𝑠, :∂³𝝭∂y³=>:𝑠)
    push!(elements["Γ²"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠, :∂³𝝭∂x³=>:𝑠, :∂³𝝭∂x²∂y=>:𝑠, :∂³𝝭∂x∂y²=>:𝑠, :∂³𝝭∂y³=>:𝑠)
    push!(elements["Γ³"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠, :∂³𝝭∂x³=>:𝑠, :∂³𝝭∂x²∂y=>:𝑠, :∂³𝝭∂x∂y²=>:𝑠, :∂³𝝭∂y³=>:𝑠)
    push!(elements["Γ⁴"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠, :∂³𝝭∂x³=>:𝑠, :∂³𝝭∂x²∂y=>:𝑠, :∂³𝝭∂x∂y²=>:𝑠, :∂³𝝭∂y³=>:𝑠)
    push!(elements["Γ¹"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y, :∂²𝗠∂x²=>∂²𝗠∂x², :∂²𝗠∂y²=>∂²𝗠∂y², :∂²𝗠∂x∂y=>∂²𝗠∂x∂y, :∂³𝗠∂x³=>∂³𝗠∂x³, :∂³𝗠∂x²∂y=>∂³𝗠∂x²∂y, :∂³𝗠∂x∂y²=>∂³𝗠∂x∂y², :∂³𝗠∂y³=>∂³𝗠∂y³)
    push!(elements["Γ²"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y, :∂²𝗠∂x²=>∂²𝗠∂x², :∂²𝗠∂y²=>∂²𝗠∂y², :∂²𝗠∂x∂y=>∂²𝗠∂x∂y, :∂³𝗠∂x³=>∂³𝗠∂x³, :∂³𝗠∂x²∂y=>∂³𝗠∂x²∂y, :∂³𝗠∂x∂y²=>∂³𝗠∂x∂y², :∂³𝗠∂y³=>∂³𝗠∂y³)
    push!(elements["Γ³"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y, :∂²𝗠∂x²=>∂²𝗠∂x², :∂²𝗠∂y²=>∂²𝗠∂y², :∂²𝗠∂x∂y=>∂²𝗠∂x∂y, :∂³𝗠∂x³=>∂³𝗠∂x³, :∂³𝗠∂x²∂y=>∂³𝗠∂x²∂y, :∂³𝗠∂x∂y²=>∂³𝗠∂x∂y², :∂³𝗠∂y³=>∂³𝗠∂y³)
    push!(elements["Γ⁴"], :𝗠=>𝗠,:∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y, :∂²𝗠∂x²=>∂²𝗠∂x², :∂²𝗠∂y²=>∂²𝗠∂y², :∂²𝗠∂x∂y=>∂²𝗠∂x∂y, :∂³𝗠∂x³=>∂³𝗠∂x³, :∂³𝗠∂x²∂y=>∂³𝗠∂x²∂y, :∂³𝗠∂x∂y²=>∂³𝗠∂x∂y², :∂³𝗠∂y³=>∂³𝗠∂y³)
end

prescribeVariables = quote
    prescribe!(elements["Γ¹"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ¹"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ¹"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ¹"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ¹"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ¹"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ¹"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    prescribe!(elements["Γ²"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ²"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ²"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ²"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ²"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ²"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ²"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    prescribe!(elements["Γ³"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ³"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ³"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ³"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ³"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ³"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ³"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    prescribe!(elements["Γ⁴"],:g₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[1])
    prescribe!(elements["Γ⁴"],:g₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[2])
    prescribe!(elements["Γ⁴"],:g₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²))[3])
    prescribe!(elements["Γ⁴"],:n₁₁=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ⁴"],:n₁₂=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₁₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₂₂=>(ξ¹,ξ²,ξ³)->1.0)
    prescribe!(elements["Γ⁴"],:n₂₃=>(ξ¹,ξ²,ξ³)->0.0)
    prescribe!(elements["Γ⁴"],:n₃₃=>(ξ¹,ξ²,ξ³)->1.0)

    push!(elements["Γ¹"], :θ=>:𝐺, :∂ₙu₁=>:𝐺, :∂ₙu₂=>:𝐺, :∂ₙu₃=>:𝐺)
    push!(elements["Γ²"], :θ=>:𝐺, :∂ₙu₁=>:𝐺, :∂ₙu₂=>:𝐺, :∂ₙu₃=>:𝐺)
    push!(elements["Γ³"], :θ=>:𝐺, :∂ₙu₁=>:𝐺, :∂ₙu₂=>:𝐺, :∂ₙu₃=>:𝐺)
    push!(elements["Γ⁴"], :θ=>:𝐺, :∂ₙu₁=>:𝐺, :∂ₙu₂=>:𝐺, :∂ₙu₃=>:𝐺)
    for a in elements["Γ¹"]∪elements["Γ²"]∪elements["Γ³"]∪elements["Γ⁴"]
        for ξ in a.𝓖
            x = Vec{2}((ξ.x,ξ.y))
            n¹ = ξ.n¹
            n² = ξ.n²
            ξ.θ = vs.𝜃ₙ(x,n¹,n²)
            x = Vec{3}((ξ.x,ξ.y,0.0))
            ∇u = gradient(u,x)
            ξ.∂ₙu₁ = ∇u[1,1]*n¹ + ∇u[1,2]*n²
            ξ.∂ₙu₂ = ∇u[2,1]*n¹ + ∇u[2,2]*n²
            ξ.∂ₙu₃ = ∇u[3,1]*n¹ + ∇u[3,2]*n²
        end
    end

    prescribe!(elements["Ωᵍ"],:u₁=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²,ξ³))[1])
    prescribe!(elements["Ωᵍ"],:u₂=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²,ξ³))[2])
    prescribe!(elements["Ωᵍ"],:u₃=>(ξ¹,ξ²,ξ³)->u((ξ¹,ξ²,ξ³))[3])
    prescribe!(elements["Ωᵍ"],:ε₁₁=>(ξ¹,ξ²,ξ³)->vs.𝜺(Vec{2}((ξ¹,ξ²)))[1,1])
    prescribe!(elements["Ωᵍ"],:ε₂₂=>(ξ¹,ξ²,ξ³)->vs.𝜺(Vec{2}((ξ¹,ξ²)))[2,2])
    prescribe!(elements["Ωᵍ"],:ε₁₂=>(ξ¹,ξ²,ξ³)->vs.𝜺(Vec{2}((ξ¹,ξ²)))[1,2])
    prescribe!(elements["Ωᵍ"],:κ₁₁=>(ξ¹,ξ²,ξ³)->vs.𝜿(Vec{2}((ξ¹,ξ²)))[1,1])
    prescribe!(elements["Ωᵍ"],:κ₂₂=>(ξ¹,ξ²,ξ³)->vs.𝜿(Vec{2}((ξ¹,ξ²)))[2,2])
    prescribe!(elements["Ωᵍ"],:κ₁₂=>(ξ¹,ξ²,ξ³)->vs.𝜿(Vec{2}((ξ¹,ξ²)))[1,2])
    prescribe!(elements["Ωᵍ"],:a¹¹=>(ξ¹,ξ²,ξ³)->cs.a¹¹(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:a²²=>(ξ¹,ξ²,ξ³)->cs.a²²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:a¹²=>(ξ¹,ξ²,ξ³)->cs.a¹²(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:𝒂₁₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ωᵍ"],:𝒂₁₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ωᵍ"],:𝒂₁₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₁(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ωᵍ"],:𝒂₂₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ωᵍ"],:𝒂₂₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ωᵍ"],:𝒂₂₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₂(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ωᵍ"],:𝒂₃₍₁₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[1])
    prescribe!(elements["Ωᵍ"],:𝒂₃₍₂₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[2])
    prescribe!(elements["Ωᵍ"],:𝒂₃₍₃₎=>(ξ¹,ξ²,ξ³)->cs.𝒂₃(Vec{3}((ξ¹,ξ²,ξ³)))[3])
    prescribe!(elements["Ωᵍ"],:Γ¹₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:Γ¹₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:Γ¹₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ¹₂₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:Γ²₁₁=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₁(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:Γ²₁₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₁₂(Vec{3}((ξ¹,ξ²,ξ³))))
    prescribe!(elements["Ωᵍ"],:Γ²₂₂=>(ξ¹,ξ²,ξ³)->cs.Γ²₂₂(Vec{3}((ξ¹,ξ²,ξ³))))

    𝗠 = (0,zeros(nₘ))
    ∂𝗠∂x = (0,zeros(nₘ))
    ∂𝗠∂y = (0,zeros(nₘ))
    ∂²𝗠∂x² = (0,zeros(nₘ))
    ∂²𝗠∂x∂y = (0,zeros(nₘ))
    ∂²𝗠∂y² = (0,zeros(nₘ))
    push!(elements["Ωᵍ"], :𝝭=>:𝑠, :∂𝝭∂x=>:𝑠, :∂𝝭∂y=>:𝑠, :∂²𝝭∂x²=>:𝑠, :∂²𝝭∂x∂y=>:𝑠, :∂²𝝭∂y²=>:𝑠)
    push!(elements["Ωᵍ"], :𝗠=>𝗠, :∂𝗠∂x=>∂𝗠∂x, :∂𝗠∂y=>∂𝗠∂y, :∂²𝗠∂x²=>∂²𝗠∂x², :∂²𝗠∂y²=>∂²𝗠∂y², :∂²𝗠∂x∂y=>∂²𝗠∂x∂y)
end
