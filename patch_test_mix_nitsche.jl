
using ApproxOperator, Tensors, JLD, LinearAlgebra

import BenchmarkExample: BenchmarkExample
include("import_prescrible_ops.jl")
include("import_patch_test.jl")
elements, nodes = import_roof_mix_nitsche("msh/patchtest.msh")

n‚Çò = 55
# n‚Çò = 21
ùëÖ = BenchmarkExample.PatchTestThinShell.ùëÖ
ùêø = BenchmarkExample.PatchTestThinShell.ùêø
E = BenchmarkExample.PatchTestThinShell.ùê∏
ŒΩ = BenchmarkExample.PatchTestThinShell.ùúà
h = BenchmarkExample.PatchTestThinShell.‚Ñé

# cs = BenchmarkExample.sphericalCoordinate(ùëÖ)
# cs = BenchmarkExample.cylindricalCoordinate(ùëÖ)
# cs = BenchmarkExample.cartesianCoordinate()

n‚Çö = length(nodes)
n·µ• = Int(length(elements["Œ©"])*3)
s = 2.5*0.1*ones(n‚Çö)
push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

n = 1
u(x) = Vec{3}(((x[1]+2*x[2])^n,(3*x[1]+4*x[2])^n,(5*x[1]+6*x[2])^n))
vs = BenchmarkExample.PatchTestThinShell.variables(cs,u)

eval(prescribeForMix)
eval(prescribeVariables)
eval(prescribeForNitsche)

setùù≠!(elements["Œ©"])
set‚àá¬≤ùù≠!(elements["Œ©‚Çö"])
set‚àáùù≠!(elements["Œì‚Çö"])
set‚àáùù≠!(elements["Œ©‚Çò"])
set‚àáùù≠!(elements["Œì‚Çò"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬π"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬≤"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬≥"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì‚Å¥"])
set‚àáùù≠!(elements["Œì¬π"])
set‚àáùù≠!(elements["Œì¬≤"])
set‚àáùù≠!(elements["Œì¬≥"])
set‚àáùù≠!(elements["Œì‚Å¥"])

eval(opsMix)

opForce = Operator{:‚à´v·µ¢b·µ¢dŒ©}()
f = zeros(3*n‚Çö)
opForce(elements["Œ©‚Çò"],f)

k·µã·µã = zeros(6*n·µ•,6*n·µ•)
k·¥∫·µã = zeros(6*n·µ•,6*n·µ•)
k·¥∫·µõ = zeros(6*n·µ•,3*n‚Çö)
k·µè·µè = zeros(9*n·µ•,9*n·µ•)
k·¥π·µè = zeros(9*n·µ•,9*n·µ•)
k·¥π·µõ = zeros(9*n·µ•,3*n‚Çö)

ops[1](elements["Œ©"],k·µã·µã)
ops[2](elements["Œ©"],k·¥∫·µã)
ops[3](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥∫·µõ)
ops[4](elements["Œ©‚Çö"],elements["Œ©‚Çò"],k·¥∫·µõ)

ops[5](elements["Œ©"],k·µè·µè)
ops[6](elements["Œ©"],k·¥π·µè)
ops[7](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[8](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[9](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[10](elements["Œ©‚Çö"],elements["Œ©‚Çò"],k·¥π·µõ)

Œ±·µ• = 1e5
Œ±·µ£ = 1e3
eval(opsPenalty)
eval(opsNitsche)
k·µõ = zeros(3*n‚Çö,3*n‚Çö)
f·µõ = zeros(3*n‚Çö)
opsv[1](elements["Œì¬π"],k·µõ,f·µõ)
opsv[1](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[1](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[1](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[2](elements["Œì¬π"],k·µõ,f·µõ)
opsv[2](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[2](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[2](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[3](elements["Œì¬π"],k·µõ,f·µõ)
opsv[3](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[3](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[3](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[4](elements["Œì¬π"],k·µõ,f·µõ)
opsv[4](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[4](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[4](elements["Œì‚Å¥"],k·µõ,f·µõ)

k·µÖ = zeros(3*n‚Çö,3*n‚Çö)
f·µÖ = zeros(3*n‚Çö)
opsŒ±[1](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì‚Å¥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì‚Å¥"],k·µÖ,f·µÖ)

k·µã·µõ = k·¥∫·µã\k·¥∫·µõ
k·µè·µõ = k·¥π·µè\k·¥π·µõ
d = (k·µã·µõ'*k·µã·µã*k·µã·µõ + k·µè·µõ'*k·µè·µè*k·µè·µõ - k·µõ - k·µÖ)\(-f - f·µõ - f·µÖ)

d‚ÇÅ = d[1:3:3*n‚Çö]
d‚ÇÇ = d[2:3:3*n‚Çö]
d‚ÇÉ = d[3:3:3*n‚Çö]

push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ,:d‚ÇÉ=>d‚ÇÉ)
@save compress=true "jld/patchtest_mix_nitsche.jld" d‚ÇÅ d‚ÇÇ d‚ÇÉ

set‚àá¬≤ùù≠!(elements["Œ©·µç"])
opE = Operator{:H‚Çë_ThinShell}(:E=>E,:ŒΩ=>ŒΩ,:h=>h)
H‚Çë, L‚ÇÇ = opE(elements["Œ©·µç"])

# d·µó = zeros(3*n‚Çö)
# for (i,node) in enumerate(nodes)
#     x = Vec{3}((node.x,node.y,node.z))
#     d·µó[3*i-2] = 0.0
#     d·µó[3*i-1] = 0.0
#     d·µó[3*i]   = (node.x+node.y)^2
# end

# d·µõ = zeros(3*n‚Çö)
# for (i,node) in enumerate(nodes)
#     x = Vec{3}((node.x,node.y,node.z))
#     u_ = u(x)
#     d·µõ[3*i-2] = u_[1]
#     d·µõ[3*i-1] = u_[2]
#     d·µõ[3*i]   = u_[3]
# end

# d‚ÇÅ = zeros(n‚Çö)
# d‚ÇÇ = zeros(n‚Çö)
# d‚ÇÉ = zeros(n‚Çö)
# for (i,node) in enumerate(nodes)
#     x = Vec{3}((node.x,node.y,node.z))
#     u_ = u(x)
#     d‚ÇÅ[i] = u_[1]
#     d‚ÇÇ[i] = u_[2]
#     d‚ÇÉ[i] = u_[3]
# end

# push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ,:d‚ÇÉ=>d‚ÇÉ)

# opsv[1](elements["Œì¬π"],k·µõ,f·µõ)
# opsv[1](elements["Œì¬≤"],k·µõ,f·µõ)
# opsv[1](elements["Œì¬≥"],k·µõ,f·µõ)
# opsv[1](elements["Œì‚Å¥"],k·µõ,f·µõ)

# k·µõ1 = zeros(3*n‚Çö,3*n‚Çö)
# f·µõ1 = zeros(3*n‚Çö)
# k·µõ2 = zeros(3*n‚Çö,3*n‚Çö)
# f·µõ2 = zeros(3*n‚Çö)
# k·µõ3 = zeros(3*n‚Çö,3*n‚Çö)
# f·µõ3 = zeros(3*n‚Çö)
# opsv[1](elements["Œì¬π"],k·µõ1,f·µõ1)
# opsv[1](elements["Œì¬≤"],k·µõ1,f·µõ1)
# opsv[1](elements["Œì¬≥"],k·µõ1,f·µõ1)
# opsv[1](elements["Œì‚Å¥"],k·µõ1,f·µõ1)
# opsv[2](elements["Œì¬π"],k·µõ2,f·µõ2)
# opsv[2](elements["Œì¬≤"],k·µõ2,f·µõ2)
# opsv[2](elements["Œì¬≥"],k·µõ2,f·µõ2)
# opsv[2](elements["Œì‚Å¥"],k·µõ2,f·µõ2)
# opsv[3](elements["Œì¬π"],k·µõ2,f·µõ2)
# opsv[3](elements["Œì¬≤"],k·µõ2,f·µõ2)
# opsv[3](elements["Œì¬≥"],k·µõ2,f·µõ2)
# opsv[3](elements["Œì‚Å¥"],k·µõ2,f·µõ2)
# opsv[4](elements["Œì¬π"],k·µõ2,f·µõ2)
# opsv[4](elements["Œì¬≤"],k·µõ2,f·µõ2)
# opsv[4](elements["Œì¬≥"],k·µõ2,f·µõ2)
# opsv[4](elements["Œì‚Å¥"],k·µõ2,f·µõ2)
# opsv[4](elements["Œì¬π"],k·µõ3,f·µõ3)
# opsv[4](elements["Œì¬≤"],k·µõ3,f·µõ3)
# opsv[4](elements["Œì¬≥"],k·µõ3,f·µõ3)
# opsv[4](elements["Œì‚Å¥"],k·µõ3,f·µõ3)
# fex = (k·µã·µõ'*k·µã·µã*k·µã·µõ + k·µè·µõ'*k·µè·µè*k·µè·µõ - k·µõ)*d·µõ - (-f - f·µõ)
# fex1 = (k·µã·µõ'*k·µã·µã*k·µã·µõ- k·µõ1)*d·µõ - (-f - f·µõ1)
# fex2 = (k·µè·µõ'*k·µè·µè*k·µè·µõ-k·µõ2)*d·µõ - (- f·µõ2)
# fex2 = (k·µè·µõ'*k·µè·µè*k·µè·µõ)*d·µõ
# fex1 = (k·µã·µõ'*k·µã·µã*k·µã·µõ)*d·µõ - (-f)
# fex2 = k·µõ1*d·µõ - f·µõ1
# fex1 = k·µõ2*d·µõ - f·µõ2
# d·µó'*f·µõ2/2
# fex1 = k·µõ*d·µõ
# fex2 = f·µõ
# fex1 = k·µè·µõ'*k·µè·µè*k·µè·µõ*d·µõ
# fex2 = k·µõ2*d·µõ - f·µõ2
# fex3 = k·µõ3*d·µõ - f·µõ3
# fex3 = fex1-fex2
# fex1 = k·µõ2*d·µõ
# println(norm(fex))
# println(norm(fex1))
# println(norm(fex2))

# err = ones(3*n‚Çö)'*(k·µõ*d·µõ - f·µõ)

# d·µã = zeros(6*n·µ•)
# for i in 1:length(elements["Œ©"])
#     d·µã[18*i-17] = 1.0
#     d·µã[18*i-14] = 2.0
# end

# d·¥∫ = zeros(6*n·µ•)
# for i in 1:length(elements["Œ©"])
#     d·¥∫[18*i-17] = E*h
#     d·¥∫[18*i-16] = E*h
#     d·¥∫[18*i-14] = E*h
# end

# d·µè = zeros(9*n·µ•)
# for i in 1:length(elements["Œ©"])
#     d·µè[27*i-24] = -2.
#     d·µè[27*i-21] = -2.
#     d·µè[27*i-18] = -4.
#     d·µè[27*i-24] = 1.
# end

# d·¥π = zeros(9*n·µ•)
# for i in 1:length(elements["Œ©"])
#     d·¥π[27*i-24] = -E*h^3/12*2
#     d·¥π[27*i-21] = -E*h^3/12*2
#     d·¥π[27*i-18] = -E*h^3/12*2
#     d·¥π[27*i-24] = E*h^3/12
# end
# println(norm(k·¥π·µõ'*d·¥π))
# println(norm(k·µè·µè*d·µè+k·¥π·µè'*d·¥π))
# println(norm(k·¥π·µõ*d·µõ+k·¥π·µè*d·µè-f·¥π))
# f1 = k·¥π·µõ*d·µõ
# f2 = k·¥π·µè*d·µè

# println(norm(k·¥∫·µõ'*d·¥∫+k·¥π·µõ'*d·¥π))
# println(norm(k·µã·µã*d·µã+k·¥∫·µã'*d·¥∫))
# println(norm(k·µè·µè*d·µè+k·¥π·µè'*d·¥π))
# println(norm(k·¥∫·µõ*d·µõ+k·¥∫·µã*d·µã-f·¥∫))
# println(norm(k·¥π·µõ*d·µõ+k·¥π·µè*d·µè-f·¥π))
