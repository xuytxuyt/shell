
using ApproxOperator, Tensors, JLD

import BenchmarkExample: BenchmarkExample
include("import_prescrible_ops.jl")
include("import_patch_test.jl")
elements, nodes = import_roof_gauss("msh/patchtest.msh")

ùëÖ = BenchmarkExample.PatchTestThinShell.ùëÖ
ùêø = BenchmarkExample.PatchTestThinShell.ùêø
h = BenchmarkExample.PatchTestThinShell.‚Ñé
E = BenchmarkExample.PatchTestThinShell.ùê∏
ŒΩ = BenchmarkExample.PatchTestThinShell.ùúà

n‚Çò = 55
cs = BenchmarkExample.cylindricalCoordinate(ùëÖ)
# cs = BenchmarkExample.cartesianCoordinate()

n‚Çö = length(nodes)
n·µ• = Int(length(elements["Œ©"])*3)
s = 2.5*0.1*ones(n‚Çö)
push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

n = 1
u(x) = Vec{3}(((x[1]+2*x[2])^n,(3*x[1]+4*x[2])^n,(5*x[1]+6*x[2])^n))
vs = BenchmarkExample.PatchTestThinShell.variables(cs,u)

eval(prescribeForGauss)
eval(prescribeForNitsche)
eval(prescribeVariables)
eval(opsGauss)

set‚àá¬≤ùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œì¬π"])
set‚àáùù≠!(elements["Œì¬≤"])
set‚àáùù≠!(elements["Œì¬≥"])
set‚àáùù≠!(elements["Œì‚Å¥"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬π"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬≤"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì¬≥"])
set‚àáÃÇ¬≥ùù≠!(elements["Œì‚Å¥"])

opForce = Operator{:‚à´v·µ¢b·µ¢dŒ©}()
f = zeros(3*n‚Çö)
opForce(elements["Œ©"],f)

k = zeros(3*n‚Çö,3*n‚Çö)
op(elements["Œ©"],k)

eval(opsNitsche)
k·µõ = zeros(3*n‚Çö,3*n‚Çö)
f·µõ = zeros(3*n‚Çö)
opsv[1](elements["Œì¬π"],k·µõ,f·µõ)
opsv[1](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[1](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[1](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[2](elements["Œì¬π"],k·µõ,f·µõ)
opsv[2](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[2](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[2](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[3](elements["Œì¬π"],k·µõ,f·µõ)
opsv[3](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[3](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[3](elements["Œì‚Å¥"],k·µõ,f·µõ)
opsv[4](elements["Œì¬π"],k·µõ,f·µõ)
opsv[4](elements["Œì¬≤"],k·µõ,f·µõ)
opsv[4](elements["Œì¬≥"],k·µõ,f·µõ)
opsv[4](elements["Œì‚Å¥"],k·µõ,f·µõ)

Œ±·µ• = 1e5
Œ±·µ£ = 1e3
eval(opsPenalty)
k·µÖ = zeros(3*n‚Çö,3*n‚Çö)
f·µÖ = zeros(3*n‚Çö)
opsŒ±[1](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì‚Å¥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì‚Å¥"],k·µÖ,f·µÖ)

d = (k + k·µõ + k·µÖ)\(f + f·µõ + f·µÖ)

d‚ÇÅ = d[1:3:3*n‚Çö]
d‚ÇÇ = d[2:3:3*n‚Çö]
d‚ÇÉ = d[3:3:3*n‚Çö]

push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ,:d‚ÇÉ=>d‚ÇÉ)

@save compress=true "jld/patchtest_gauss_nitsche.jld" d‚ÇÅ d‚ÇÇ d‚ÇÉ

set‚àá¬≤ùù≠!(elements["Œ©·µç"])
opE = Operator{:H‚Çë_ThinShell}(:E=>E,:ŒΩ=>ŒΩ,:h=>h)
H‚Çë, L‚ÇÇ = opE(elements["Œ©·µç"])
