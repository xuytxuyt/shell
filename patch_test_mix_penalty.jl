
using ApproxOperator, Tensors, JLD

import BenchmarkExample: BenchmarkExample
include("import_prescrible_ops.jl")
include("import_patch_test.jl")
elements, nodes = import_roof_mix("msh/patchtest.msh")

ùëÖ = BenchmarkExample.PatchTestThinShell.ùëÖ
ùêø = BenchmarkExample.PatchTestThinShell.ùêø
E = BenchmarkExample.PatchTestThinShell.ùê∏
ŒΩ = BenchmarkExample.PatchTestThinShell.ùúà
h = 1.0

cs = BenchmarkExample.cylindricalCoordinate(ùëÖ)
# cs = BenchmarkExample.cartesianCoordinate()

n‚Çö = length(nodes)
n·µ• = Int(length(elements["Œ©"])*3)
s = 3.5*0.2*ones(n‚Çö)
push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)

setùù≠!(elements["Œ©"])
set‚àá¬≤ùù≠!(elements["Œ©‚Çö"])
set‚àáùù≠!(elements["Œì‚Çö"])
set‚àáùù≠!(elements["Œ©‚Çò"])
set‚àáùù≠!(elements["Œì‚Çò"])
set‚àáùù≠!(elements["Œì¬π"])
set‚àáùù≠!(elements["Œì¬≤"])
set‚àáùù≠!(elements["Œì¬≥"])
set‚àáùù≠!(elements["Œì‚Å¥"])
set‚àáùù≠!(elements["Œì¬π‚Çö"])
set‚àáùù≠!(elements["Œì¬≤‚Çö"])
set‚àáùù≠!(elements["Œì¬≥‚Çö"])
set‚àáùù≠!(elements["Œì‚Å¥‚Çö"])

n = 1
# u(x) = Vec{3}(((x[1]+2*x[2])^n,(3*x[1]+4*x[2])^n,(5*x[1]+6*x[2])^n))
# u(x) = Vec{3}(((x[1]+2*x[2])^n,(3*x[1]+4*x[2])^n,0.0))
u(x) = Vec{3}((0.0,0.0,(5*x[1]+6*x[2])^n))
# u(x) = Vec{3}((0.0,3*x[1]+4*x[2],0.0))
vs = BenchmarkExample.PatchTestThinShell.variables(cs,u)

eval(prescribeForMix)
eval(prescribeForPenalty)
eval(prescribeVariables)

eval(opsMix)

f = zeros(3*n‚Çö)

k·µã·µã = zeros(6*n·µ•,6*n·µ•)
k·¥∫·µã = zeros(6*n·µ•,6*n·µ•)
k·¥∫·µõ = zeros(6*n·µ•,3*n‚Çö)
k·µè·µè = zeros(9*n·µ•,9*n·µ•)
k·¥π·µè = zeros(9*n·µ•,9*n·µ•)
k·¥π·µõ = zeros(9*n·µ•,3*n‚Çö)

ops[1](elements["Œ©"],k·µã·µã)
ops[2](elements["Œ©"],k·¥∫·µã)
ops[3](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥∫·µõ)
ops[4](elements["Œ©‚Çö"],elements["Œ©‚Çò"],k·¥∫·µõ)

ops[5](elements["Œ©"],k·µè·µè)
ops[6](elements["Œ©"],k·¥π·µè)
ops[7](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[8](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[9](elements["Œì‚Çö"],elements["Œì‚Çò"],k·¥π·µõ)
ops[10](elements["Œ©‚Çö"],elements["Œ©‚Çò"],k·¥π·µõ)

Œ±·µ• = 1e9
Œ±·µ£ = 1e7
eval(opsPenalty)
k·µÖ = zeros(3*n‚Çö,3*n‚Çö)
f·µÖ = zeros(3*n‚Çö)
opsŒ±[1](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[1](elements["Œì‚Å¥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬π"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≤"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì¬≥"],k·µÖ,f·µÖ)
opsŒ±[2](elements["Œì‚Å¥"],k·µÖ,f·µÖ)

k·µã·µõ = k·¥∫·µã\k·¥∫·µõ
k·µè·µõ = k·¥π·µè\k·¥π·µõ
d = (k·µÖ + k·µã·µõ'*k·µã·µã*k·µã·µõ + k·µè·µõ'*k·µè·µè*k·µè·µõ)\(-f + f·µÖ)

d‚ÇÅ = d[1:3:3*n‚Çö]
d‚ÇÇ = d[2:3:3*n‚Çö]
d‚ÇÉ = d[3:3:3*n‚Çö]

push!(nodes,:d‚ÇÅ=>d‚ÇÅ,:d‚ÇÇ=>d‚ÇÇ,:d‚ÇÉ=>d‚ÇÉ)

set‚àá¬≤ùù≠!(elements["Œ©·µç"])
opE = Operator{:H‚Çë_ThinShell}(:E=>E,:ŒΩ=>ŒΩ,:h=>h)
H‚Çë, L‚ÇÇ = opE(elements["Œ©·µç"])